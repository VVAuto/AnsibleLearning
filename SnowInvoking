function ProcessList {
    param (
        [Parameter(Mandatory=$true)]
        [System.Collections.IList]$InputList
    )

    $timeout = 30  # Timeout in seconds

    foreach ($item in $InputList) {
        $proceed = $false

        do {
            Write-Host "Do you want to process $($item)? (yes/no)"
            $timer = [Diagnostics.Stopwatch]::StartNew()
            $choice = $null

            while (-not $choice -and ($timer.Elapsed.TotalSeconds -lt $timeout)) {
                $timeLeft = $timeout - [math]::Ceiling($timer.Elapsed.TotalSeconds)
                Write-Host "Time remaining for $($item): $timeLeft seconds" -NoNewline
                Start-Sleep -Seconds 1
                Write-Host "`r`t`t`t`t`t`t`t`t" -NoNewline
                if ($Host.UI.RawUI.KeyAvailable) {
                    $key = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
                    if ($key.VirtualKeyCode -eq 13) {
                        $choice = "yes"
                    }
                }
            }

            $timer.Stop()

            if (-not $choice -or $choice -eq "yes") {
                # Perform your task here using $item
                Write-Host "Processing $($item)..."
                $proceed = $true
            } else {
                Write-Host "Skipping $($item)..."
                $proceed = $true
            }
        } until ($proceed)
    }
}

# Example list
$list = @(1, 2, 3, 4, 5)

# Call the function
ProcessList -InputList $list