

# # Create an empty hash table to store the handover details
$handoverDetails = @{}

# Prompt user for ticket handover details
do {
    # Ask if there is any ticket to handover
    $handoverChoice = Read-Host "Is there any ticket to handover? (yes/no)"

    if ($handoverChoice -eq "yes") {
        # Ask for the incident number
        $incidentNumber = Read-Host "Enter the incident number:"

        # Ask for the person providing the handover
        $handoverBy = Read-Host "Enter the username providing the handover:"

        # Ask for the plan of action for the ticket
        $planOfAction = Read-Host "Enter the plan of action for the ticket:"

        # Ask to whom it is being reassigned
        $reassignTo = Read-Host "Enter the username to whom it is being reassigned:"

        # Create an object to store all the handover details
        $handoverObject = [PSCustomObject]@{
            IncidentNumber = $incidentNumber
            HandoverBy = $handoverBy
            PlanOfAction = $planOfAction
            ReassignTo = $reassignTo
        }

        # Add the handover details object to the hash table
        $handoverDetails[$incidentNumber] = $handoverObject
    }
    elseif ($handoverChoice -ne "no") {
        Write-Host "Invalid choice. Please enter 'yes' or 'no'."
    }

} while ($handoverChoice -ne "no")

# Output the captured handover details
Write-Host "Handover Details:"
foreach ($incident in $handoverDetails.GetEnumerator()) {
    Write-Host "Incident Number: $($incident.Value.IncidentNumber)"
    Write-Host "Handover By: $($incident.Value.HandoverBy)"
    Write-Host "Plan of Action: $($incident.Value.PlanOfAction)"
    Write-Host "Reassigned To: $($incident.Value.ReassignTo)"
    Write-Host ""
}


---
- name: Generate Snow API token
  hosts: localhost
  gather_facts: false
  vars:
    client_id: "your_client_id"
    client_secret: "your_client_secret"
    token_url: "https://your-snow-api.com/oauth/token"
    token_payload:
      grant_type: "client_credentials"
      scope: "api"
  tasks:
    - name: Generate token
      uri:
        url: "{{ token_url }}"
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: "{{ token_payload.grant_type }}"
          scope: "{{ token_payload.scope }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        auth:
          user: "{{ client_id }}"
          password: "{{ client_secret }}"
        validate_certs: false
        return_content: yes
      register: token_response

    - name: Print token
      debug:
        var: token_response.json.access_token
