# app.py

from flask import Flask, redirect, url_for, session, request, render_template_string, abort
from functools import wraps
import msal
import uuid
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)  # Use a secure, fixed key in production

# MSAL configuration
CLIENT_ID = "your_client_id"
CLIENT_SECRET = "your_client_secret"
AUTHORITY = "https://login.microsoftonline.com/your_tenant_id_or_common"
REDIRECT_PATH = "/oauth2/callback"
SCOPE = ["openid", "email", "profile", "User.Read"]

# Build MSAL app
def _build_msal_app(cache=None):
    return msal.ConfidentialClientApplication(
        CLIENT_ID, authority=AUTHORITY, client_credential=CLIENT_SECRET, token_cache=cache
    )

# Build auth URL
def _build_auth_url():
    msal_app = _build_msal_app()
    return msal_app.get_authorization_request_url(
        scopes=SCOPE,
        state=str(uuid.uuid4()),
        redirect_uri=url_for("authorized", _external=True),
    )

# Login route
@app.route("/login")
def login():
    auth_url = _build_auth_url()
    return redirect(auth_url)

# Callback route
@app.route(REDIRECT_PATH)
def authorized():
    if request.args.get("state") is None or "code" not in request.args:
        return "Authorization failed.", 400

    msal_app = _build_msal_app()
    result = msal_app.acquire_token_by_authorization_code(
        request.args["code"],
        scopes=SCOPE,
        redirect_uri=url_for("authorized", _external=True),
    )

    if "id_token_claims" in result:
        claims = result["id_token_claims"]

        user_name = claims.get("name", "Unknown")
        user_email = claims.get("preferred_username", "unknown@example.com")
        user_roles = claims.get("roles", [])

        session["user"] = {
            "name": user_name,
            "email": user_email,
            "roles": user_roles if isinstance(user_roles, list) else [],
        }

        return redirect(url_for("index"))
    else:
        return "Failed to acquire token.", 400

# Logout route
@app.route("/logout")
def logout():
    session.clear()
    logout_url = (
        AUTHORITY + "/oauth2/v2.0/logout"
        + "?post_logout_redirect_uri=" + url_for("index", _external=True)
    )
    return redirect(logout_url)

# Role-required decorator
def role_required(*roles):
    def decorator(f):
        @wraps(f)
        def wrapped(*args, **kwargs):
            user = session.get("user")
            if not user:
                return redirect(url_for("login"))
            if not any(role in user.get("roles", []) for role in roles):
                return abort(403)
            return f(*args, **kwargs)
        return wrapped
    return decorator

# Before request hook to enforce login globally
@app.before_request
def enforce_login():
    exempt_routes = ["login", "authorized", "static"]
    if request.endpoint not in exempt_routes and "user" not in session:
        return redirect(url_for("login"))

# After request hook to set security headers
@app.after_request
def set_security_headers(response):
    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    response.headers["Content-Security-Policy"] = "default-src 'self'"
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["Referrer-Policy"] = "no-referrer"
    response.headers["Permissions-Policy"] = "geolocation=(), microphone=()"
    return response

# Home route
@app.route("/")
def index():
    user = session.get("user")
    return render_template_string("""
        <h2>Welcome {{ user.name }}</h2>
        <p>Email: {{ user.email }}</p>
        <p>Roles: {{ user.roles }}</p>
        <a href="{{ url_for('logout') }}">Logout</a><br>
        <a href="{{ url_for('admin_page') }}">Go to Admin Page</a>
    """, user=user)

# Admin route
@app.route("/admin")
@role_required("Admin", "Root")
def admin_page():
    return "Hello, Admin! You have special access."

if __name__ == "__main__":
    app.run(debug=True)